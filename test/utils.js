// Copyright 2021 Google LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     https://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

const spawn = require("child_process").spawn;
const expect = require("chai").expect;
const fs = require("fs").promises;
const path = require("path");
const Enquirer = require("enquirer");
const { cleanup, generatorPrompt } = require("../src/utils");

const projectName = "app";

beforeEach(async function () {
  try {
    spawn("rm", ["-rf", projectName], { stdio: "inherit" });
  } catch (err) {
    //This might just error sometimes if there's no dir, that's OK.
    console.log("error cleaning up", err);
  }
});

describe("utils", function () {
  describe("cleanup garbage", function () {
    it("removes garbage generated by a failed run", async function () {
      const dirname = path.join(process.cwd(), "app");
      await fs.mkdir(dirname);
      await cleanup(dirname);

      //Really we're checking for it to NOT exist, but this is more understandable.
      const doesExist = async () => {
        try {
          return await fs.access(dirname);
        } catch (err) {
          return undefined;
        }
      };
      expect(await doesExist()).to.be.undefined;
    });
  });

  describe("generator parsing", function () {
    describe("generator prompt", function () {
      it("parses answers properly with no framework / javascript", async function () {
        const enquirer = new Enquirer(
          {
            show: false,
            autofill: true,
          },
          {
            framework: "No Framework",
            language: "javascript",
            projectName: projectName,
          }
        );
        const expectedAnswers = {
          framework: "No Framework",
          language: "javascript",
          projectName: "app",
        };
        const prompt = generatorPrompt(projectName);
        return enquirer.prompt(prompt).then((answers) => {
          console.log(answers);
          expect(answers).to.deep.equal(expectedAnswers);
        });
      });

      it("parses answers properly with no framework / typescript", async function () {
        const enquirer = new Enquirer(
          {
            show: false,
            autofill: true,
          },
          {
            framework: "No Framework",
            language: "typescript",
            projectName: projectName,
          }
        );
        const expectedAnswers = {
          framework: "No Framework",
          language: "typescript",
          projectName: "app",
        };
        const prompt = generatorPrompt(projectName);
        return enquirer.prompt(prompt).then((answers) => {
          console.log(answers);
          expect(answers).to.deep.equal(expectedAnswers);
        });
      });

      it("parses answers properly with react / javascript", async function () {
        const enquirer = new Enquirer(
          {
            show: false,
            autofill: true,
          },
          {
            framework: "react",
            language: "javascript",
            projectName: projectName,
          }
        );
        const expectedAnswers = {
          framework: "react",
          language: "javascript",
          projectName: "app",
        };
        const prompt = generatorPrompt(projectName);
        return enquirer.prompt(prompt).then((answers) => {
          console.log(answers);
          expect(answers).to.deep.equal(expectedAnswers);
        });
      });

      it("parses answers properly with react / typescript", async function () {
        const enquirer = new Enquirer(
          {
            show: false,
            autofill: true,
          },
          {
            framework: "react",
            language: "typescript",
            projectName: projectName,
          }
        );
        const expectedAnswers = {
          framework: "react",
          language: "typescript",
          projectName: "app",
        };
        const prompt = generatorPrompt(projectName);
        return enquirer.prompt(prompt).then((answers) => {
          console.log(answers);
          expect(answers).to.deep.equal(expectedAnswers);
        });
      });
    });
  });
});
