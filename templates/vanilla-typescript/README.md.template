// Copyright 2021 Google LLC

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     https://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

module.exports = options => `# Looker Extension ${options.projectName}

${options.projectName} is a Looker extension using TypeScript.

## Getting Started for Development

1. Install the dependencies with [Yarn](https://yarnpkg.com/).

    \`\`\`sh
    yarn install
    \`\`\`

2. Build the project

    \`\`\`sh
    yarn build
    \`\`\`

3. Start the development server

    \`\`\`sh
    yarn develop
    \`\`\`

    The development server is now running and serving the JavaScript at http://localhost:8080/bundle.js.

4. Now log in to Looker and create a new project.

    This is found under **Develop** => **Manage LookML Projects** => **New LookML Project**.

    Select "Blank Project" as the "Starting Point". This creates a new LookML project with no files.

5. Create a \`manifest\` file

   Either drag and upload the \`manifest.lkml\` file in this directory into your Looker project, or create a \`manifest.lkml\` with the same content. Change the \`id\`, \`label\`, or \`url\` as needed.

   \`\`\`
    project_name: "extension-counter"
    application: extension-counter {
        label: "Extension Counter"
        url: "http://localhost:8080/bundle.js"
        entitlements: {
          core_api_methods: ["me"]
        }
    }
   \`\`\`

6. Create a \`model\` LookML file in your project.

   Typically, the model is named the the same as the extension project. The model is used to control access to the extension.

   - Add a connection in this model (it can be any connection).
   - [Configure the model you created](https://docs.looker.com/data-modeling/getting-started/create-projects#configuring_a_model) so that it has access to some connection.

7. Connect the new project to Git.

   This can be done in multiple ways:

   - Create a new repository on GitHub or a similar service, and follow the instructions to [connect your project to Git](https://docs.looker.com/data-modeling/getting-started/setting-up-git-connection)
   - A simpler but less powerful approach is to set up git with the "Bare" repository option which does not require connecting to an external Git Service.

8. Commit the changes and deploy them to production through the Project UI.

9. Reload the page and click the \`Browse\` dropdown menu. You should see the extension label in the list.

   - The extension will load the JavaScript from the \`url\` you provided in the \`application\` definition. By default, this is \`http://localhost:8080/bundle.js\`. If you change the port your server runs on in the \`package.json\`, you will need to also update it in the \`manifest.lkml\`.
   - Reloading the extension page will bring in any new code changes from the extension template.

## Deploying the extension

To allow other people to use the extension, build the JavaScript bundle file and directly include it in the project.

1. Build the extension with \`yarn build\` in the extension project directory on your development machine.
2. Drag and drop the generated \`dist/bundle.js\` file into the Looker project interface
3. Modify your \`manifest.lkml\` to use \`file\` instead of \`url\`:

   \`\`\`
    project_name: "${options.projectName}"
    application: ${options.projectName} {
        label: "A Looker TypeScript extension"
        file: "bundle.js"
        entitlements: {
          core_api_methods: ["me"]
        }
    }
   \`\`\`
`